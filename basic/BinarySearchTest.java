import java.util.Random;public class BinarySearchTest{	//二分法查找，在给定的整型数组内查找给定的整型数值，如果不存在，返回-1，//如果存在，则返回其下标。并打印每一趟查找对比的数字。	public static int binarySearch(int[] arr, int value){		int beg = 0, end = arr.length - 1, mid;		while(beg <= end){			mid = (beg + end) / 2;			if(arr[mid] == value){				return mid;			}			if(arr[mid] > value){				end = mid - 1;			}			if(arr[mid] < value){				beg = mid + 1;			}			/*			//打印每一趟比较的结果			for(int i = 0; i < arr.length; i++){				System.out.print(arr[i]);				if(mid == i){					System.out.print("'");				}				System.out.print(" ");			}			System.out.println();			*/		}				return -1;	}	//冒泡排序法	public static void bubbleSort(int[] arr){		//需要进行排序的趟数				for(int i = 0; i < arr.length - 1; i++){			//			boolean flag = true;    //设置是否交换的标志			for(int j = 0; j < arr.length - 1 - i; j++){				if(arr[j] > arr[j + 1]){					int tmp = arr[j];					arr[j] = arr[j + 1];					arr[j + 1] = tmp;					//进行交换，则设为false					flag = false;				}							}			//如果没有交换发生，则退出循环。			if(flag){				break;			}			/*			//打印每一趟排序的结果			for(int k = 0; k < arr.length; k++){				System.out.print(arr[k] + " ");			}			System.out.println();						*/		}	}		public static void quickeSort(int[] arr){			}		public static void main(String[] args){		//生成随机数		Random rand = new Random();		final int SIZE = 50;		int[] arr = new int[SIZE];		for(int i = 0; i < SIZE; i++){			arr[i] = rand.nextInt(41) + 10;		}		bubbleSort(arr);		for(int j = 0; j < 50; j++){			System.out.print(arr[j] + " ");		}		System.out.println();		for(int i = 0; i < 50; i++){			int index = binarySearch(arr, i);						//System.out.println(i + " : " + index);						if(index != -1){				int end = index;				while(end < 50 && i == arr[end]){										end++;				}				int times = end - index;				System.out.println(arr[index] + " : " + times);			}					}	}}